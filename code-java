import java.util.ArrayList;
import java.util.Scanner;

class Book {
    private int bookId;
    private String title;
    private String author;
    private int copies;

    public Book(int bookId, String title, String author, int copies) {
        this.bookId = bookId;
        this.title = title;
        this.author = author;
        this.copies = copies;
    }

    public int getBookId() {
        return bookId;
    }

    public String getTitle() {
        return title;
    }

    public int getCopies() {
        return copies;
    }

    public void borrowBook() {
        if (copies > 0) {
            copies--;
        }
    }

    public void returnBook() {
        copies++;
    }

    public void displayDetails() {
        System.out.println("ID: " + bookId + ", Title: " + title + ", Author: " + author + ", Copies: " + copies);
    }
}

class Library {
    private ArrayList<Book> books;

    public Library() {
        books = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
        System.out.println("Book '" + book.getTitle() + "' added to the library!");
    }

    public void displayBooks() {
        if (books.isEmpty()) {
            System.out.println("No books available in the library.");
        } else {
            System.out.println("\nAvailable books:");
            for (Book book : books) {
                book.displayDetails();
            }
        }
    }

    public void borrowBook(int bookId) {
        for (Book book : books) {
            if (book.getBookId() == bookId && book.getCopies() > 0) {
                book.borrowBook();
                System.out.println("You have borrowed '" + book.getTitle() + "'.");
                return;
            }
        }
        System.out.println("Book not available or incorrect ID.");
    }

    public void returnBook(int bookId) {
        for (Book book : books) {
            if (book.getBookId() == bookId) {
                book.returnBook();
                System.out.println("Book '" + book.getTitle() + "' returned successfully!");
                return;
            }
        }
        System.out.println("Invalid book ID.");
    }

    public void searchBook(String keyword) {
        boolean found = false;
        System.out.println("\nSearch Results:");
        for (Book book : books) {
            if (book.getTitle().toLowerCase().contains(keyword.toLowerCase())) {
                book.displayDetails();
                found = true;
            }
        }
        if (!found) {
            System.out.println("No books found with the given keyword.");
        }
    }
}

public class LibraryManagementSystem {
    public static void main(String[] args) {
        Library library = new Library();
        Scanner scanner = new Scanner(System.in);

        // Adding sample books
        library.addBook(new Book(1, "To Kill a Mockingbird", "Harper Lee", 3));
        library.addBook(new Book(2, "1984", "George Orwell", 5));
        library.addBook(new Book(3, "The Great Gatsby", "F. Scott Fitzgerald", 2));

        while (true) {
            System.out.println("\nLibrary Management System:");
            System.out.println("1. Display Books");
            System.out.println("2. Add Book");
            System.out.println("3. Borrow Book");
            System.out.println("4. Return Book");
            System.out.println("5. Search Book");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    library.displayBooks();
                    break;

                case 2:
                    System.out.print("Enter book ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine(); // Consume newline

                    System.out.print("Enter title: ");
                    String title = scanner.nextLine();

                    System.out.print("Enter author: ");
                    String author = scanner.nextLine();

                    System.out.print("Enter number of copies: ");
                    int copies = scanner.nextInt();

                    library.addBook(new Book(id, title, author, copies));
                    break;

                case 3:
                    System.out.print("Enter book ID to borrow: ");
                    int borrowId = scanner.nextInt();
                    library.borrowBook(borrowId);
                    break;

                case 4:
                    System.out.print("Enter book ID to return: ");
                    int returnId = scanner.nextInt();
                    library.returnBook(returnId);
                    break;

                case 5:
                    System.out.print("Enter keyword to search: ");
                    String keyword = scanner.nextLine();
                    library.searchBook(keyword);
                    break;

                case 6:
                    System.out.println("Exiting Library Management System. Goodbye!");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

import java.util.ArrayList;
import java.util.Scanner;

// Flight class
class Flight {
    private String flightNumber;
    private String destination;
    private String departure;
    private int capacity;
    private int bookedSeats;

    public Flight(String flightNumber, String destination, String departure, int capacity) {
        this.flightNumber = flightNumber;
        this.destination = destination;
        this.departure = departure;
        this.capacity = capacity;
        this.bookedSeats = 0;
    }

    // Getters
    public String getFlightNumber() {
        return flightNumber;
    }

    public String getDestination() {
        return destination;
    }

    public String getDeparture() {
        return departure;
    }

    public int getAvailableSeats() {
        return capacity - bookedSeats;
    }

    // Book a seat
    public boolean bookSeat() {
        if (bookedSeats < capacity) {
            bookedSeats++;
            return true;
        } else {
            return false;
        }
    }

    @Override
    public String toString() {
        return "Flight Number: " + flightNumber + ", Destination: " + destination +
                ", Departure: " + departure + ", Available Seats: " + getAvailableSeats();
    }
}

// Passenger class
class Passenger {
    private String name;
    private String passportNumber;

    public Passenger(String name, String passportNumber) {
        this.name = name;
        this.passportNumber = passportNumber;
    }

    // Added getter method for name to use in booking confirmation
    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Passenger Name: " + name + ", Passport Number: " + passportNumber;
    }
}

// Booking class
class Booking {
    private Passenger passenger;
    private Flight flight;

    public Booking(Passenger passenger, Flight flight) {
        this.passenger = passenger;
        this.flight = flight;
    }

    @Override
    public String toString() {
        return passenger.toString() + ", Flight: " + flight.getFlightNumber();
    }
}

// AirlineReservationSystem class
class AirlineReservationSystem {
    private ArrayList<Flight> flights;
    private ArrayList<Booking> bookings;

    public AirlineReservationSystem() {
        flights = new ArrayList<>();
        bookings = new ArrayList<>();
    }

    // Add a flight
    public void addFlight(Flight flight) {
        flights.add(flight);
    }

    // List all flights
    public void listFlights() {
        if (flights.isEmpty()) {
            System.out.println("No flights available.");
        } else {
            for (Flight flight : flights) {
                System.out.println(flight);
            }
        }
    }

    // Find a flight by flight number
    public Flight findFlightByNumber(String flightNumber) {
        for (Flight flight : flights) {
            if (flight.getFlightNumber().equalsIgnoreCase(flightNumber)) {
                return flight;
            }
        }
        return null;
    }

    // Book a flight
    public void bookFlight(Passenger passenger, String flightNumber) {
        Flight flight = findFlightByNumber(flightNumber);
        if (flight != null) {
            if (flight.bookSeat()) {
                Booking booking = new Booking(passenger, flight);
                bookings.add(booking);
                System.out.println("Booking successful for " + passenger.getName());
            } else {
                System.out.println("No available seats on this flight.");
            }
        } else {
            System.out.println("Flight not found.");
        }
    }

    // List all bookings
    public void listBookings() {
        if (bookings.isEmpty()) {
            System.out.println("No bookings available.");
        } else {
            for (Booking booking : bookings) {
                System.out.println(booking);
            }
        }
    }
}

// Main class
public class AirlineReservationSystemApp {
    public static void main(String[] args) {
        AirlineReservationSystem system = new AirlineReservationSystem();
        Scanner scanner = new Scanner(System.in);

        // Preload flights
        system.addFlight(new Flight("A101", "New York", "Los Angeles", 100));
        system.addFlight(new Flight("B202", "London", "Paris", 50));
        system.addFlight(new Flight("C303", "Tokyo", "Seoul", 75));

        while (true) {
            System.out.println("\nAirline Reservation System:");
            System.out.println("1. List Flights");
            System.out.println("2. Book a Flight");
            System.out.println("3. View Bookings");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    system.listFlights();
                    break;
                case 2:
                    System.out.print("Enter passenger name: ");
                    scanner.nextLine(); // Consume newline
                    String name = scanner.nextLine();
                    System.out.print("Enter passport number: ");
                    String passportNumber = scanner.nextLine();
                    System.out.print("Enter flight number: ");
                    String flightNumber = scanner.nextLine();

                    Passenger passenger = new Passenger(name, passportNumber);
                    system.bookFlight(passenger, flightNumber);
                    break;
                case 3:
                    system.listBookings();
                    break;
                case 4:
                    System.out.println("Exiting system. Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

import java.util.*;

class Student {
    private int id;
    private String name;
    private int totalClasses;
    private int attendedClasses;

    public Student(int id, String name) {
        this.id = id;
        this.name = name;
        this.totalClasses = 0;
        this.attendedClasses = 0;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void markAttendance(boolean isPresent) {
        totalClasses++;
        if (isPresent) {
            attendedClasses++;
        }
    }

    public double getAttendancePercentage() {
        if (totalClasses == 0) return 0;
        return (attendedClasses / (double) totalClasses) * 100;
    }

    public void displayAttendance() {
        System.out.println("ID: " + id + ", Name: " + name);
        System.out.println("Total Classes: " + totalClasses + ", Attended: " + attendedClasses);
        System.out.printf("Attendance Percentage: %.2f%%\n", getAttendancePercentage());
    }
}

public class AttendanceManagementSystem {
    private Map<Integer, Student> students = new HashMap<>();

    public void addStudent(int id, String name) {
        if (students.containsKey(id)) {
            System.out.println("Student with this ID already exists!");
        } else {
            students.put(id, new Student(id, name));
            System.out.println("Student added successfully.");
        }
    }

    public void markAttendance(int id, boolean isPresent) {
        Student student = students.get(id);
        if (student != null) {
            student.markAttendance(isPresent);
            System.out.println("Attendance marked for " + student.getName());
        } else {
            System.out.println("Student not found!");
        }
    }

    public void displayAllAttendance() {
        if (students.isEmpty()) {
            System.out.println("No students in the system.");
            return;
        }
        for (Student student : students.values()) {
            student.displayAttendance();
            System.out.println("-------------------------");
        }
    }

    public void displayStudentAttendance(int id) {
        Student student = students.get(id);
        if (student != null) {
            student.displayAttendance();
        } else {
            System.out.println("Student not found!");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        AttendanceManagementSystem system = new AttendanceManagementSystem();
        
        while (true) {
            System.out.println("\n--- Attendance Management System ---");
            System.out.println("1. Add Student");
            System.out.println("2. Mark Attendance");
            System.out.println("3. Display All Attendance");
            System.out.println("4. Display Student Attendance");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    System.out.print("Enter Student ID: ");
                    int id = scanner.nextInt();
                    scanner.nextLine(); // Consume newline
                    System.out.print("Enter Student Name: ");
                    String name = scanner.nextLine();
                    system.addStudent(id, name);
                    break;

                case 2:
                    System.out.print("Enter Student ID: ");
                    int studentId = scanner.nextInt();
                    System.out.print("Is the student present? (true/false): ");
                    boolean isPresent = scanner.nextBoolean();
                    system.markAttendance(studentId, isPresent);
                    break;

                case 3:
                    system.displayAllAttendance();
                    break;

                case 4:
                    System.out.print("Enter Student ID: ");
                    int searchId = scanner.nextInt();
                    system.displayStudentAttendance(searchId);
                    break;

                case 5:
                    System.out.println("Exiting the system.");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}
